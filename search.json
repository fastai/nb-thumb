[
  {
    "objectID": "test_nbs/geom_map.html",
    "href": "test_nbs/geom_map.html",
    "title": "The Political Territories of Westeros",
    "section": "",
    "text": "import pandas as pd\nimport geopandas as gp\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_map,\n    geom_text,\n    labs,\n    scale_fill_brewer,\n    scale_x_continuous,\n    scale_y_continuous,\n    scale_size_continuous,\n    coord_cartesian,\n    element_rect,\n    theme_void,\n    theme\n)\n\nLayering different features on a Map\nRead data and select features in Westeros only.\n\ncontinents = gp.read_file('data/lands-of-ice-and-fire/continents.shp')\nislands = gp.read_file('data/lands-of-ice-and-fire/islands.shp')\nlakes = gp.read_file('data/lands-of-ice-and-fire/lakes.shp')\nrivers = gp.read_file('data/lands-of-ice-and-fire/rivers.shp')\npolitical = gp.read_file('data/lands-of-ice-and-fire/political.shp')\nwall = gp.read_file('data/lands-of-ice-and-fire/wall.shp')\nroads = gp.read_file('data/lands-of-ice-and-fire/roads.shp')\nlocations = gp.read_file('data/lands-of-ice-and-fire/locations.shp')\n\nwesteros = continents.query('name==\"Westeros\"')\nislands = islands.query('continent==\"Westeros\" and name!=\"Summer Islands\"')\nlakes = lakes.query('continent==\"Westeros\"')\nrivers = rivers.query('continent==\"Westeros\"')\nroads = roads.query('continent==\"Westeros\"')\n\nwg = westeros.geometry[0]\nbool_idx = [wg.contains(g) for g in locations.geometry]\nwesteros_locations = locations[bool_idx]\ncities = westeros_locations[westeros_locations['type'] == 'City'].copy()\n\nCreate map by placing the features in layers in an order that limits obstraction.\nThe GeoDataFrame.geometry.centroid property has the center coordinates of polygons, we use these to place the labels of the political regions.\n\n# colors\nwater_color = '#a3ccff'\nwall_color = 'white'\nroad_color = 'brown'\n\n# Create label text by merging the territory name and\n# the claimant to the territory\ndef fmt_labels(names, claimants):\n    labels = []\n    for name, claimant in zip(names, claimants):\n        if name:\n            labels.append('{} ({})'.format(name, claimant))\n        else:\n            labels.append('({})'.format(claimant))\n    return labels\n\n\ndef calculate_center(df):\n    \"\"\"\n    Calculate the centre of a geometry\n    \n    This method first converts to a planar crs, gets the centroid\n    then converts back to the original crs. This gives a more\n    accurate\n    \"\"\"\n    original_crs = df.crs\n    planar_crs = 'EPSG:3857'\n    return df['geometry'].to_crs(planar_crs).centroid.to_crs(original_crs)\n\n\npolitical['center'] = calculate_center(political)\ncities['center'] = calculate_center(cities)\n\n# Gallery Plot\n\n(ggplot()\n + geom_map(westeros, fill=None)\n + geom_map(islands, fill=None)\n + geom_map(political, aes(fill='ClaimedBy'), color=None, show_legend=False)\n + geom_map(wall, color=wall_color, size=2)\n + geom_map(lakes, fill=water_color, color=None)\n + geom_map(rivers, aes(size='size'), color=water_color, show_legend=False)\n + geom_map(roads, aes(size='size'), color=road_color, alpha=0.5, show_legend=False)\n + geom_map(cities, size=1)\n + geom_text(\n     political,\n     aes('center.x', 'center.y', label='fmt_labels(name, ClaimedBy)'),\n     size=8,\n     fontweight='bold'\n )\n + geom_text(\n     cities,\n     aes('center.x', 'center.y', label='name'),\n     size=8,\n     ha='left',\n     nudge_x=.20\n )\n + labs(title=\"The Political Territories of Westeros\")\n + scale_fill_brewer(type='qual', palette=8)\n + scale_x_continuous(expand=(0, 0, 0, 1))\n + scale_y_continuous(expand=(0, 1, 0, 0))\n + scale_size_continuous(range=(0.4, 1))\n + coord_cartesian()\n + theme_void()\n + theme(figure_size=(8, 12), panel_background=element_rect(fill=water_color))\n)\n\n\n\n\nThe political territories of Westeros\n\n\n\n\n&lt;Figure Size: (800 x 1200)&gt;\n\n\nCredit: cadaei of the cartographersguild website forum."
  },
  {
    "objectID": "test_nbs/geom_col.html",
    "href": "test_nbs/geom_col.html",
    "title": "Two Variable Bar Plot",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_col,\n    geom_text,\n    position_dodge,\n    lims,\n    theme,\n    element_text,\n    element_blank,\n    element_rect,\n    element_line,\n)\n\nVisualising on a single plot the values of a variable that has nested (and independent) variables\nCreate the data\n\ndf = pd.DataFrame({\n    'variable': ['gender', 'gender', 'age', 'age', 'age', 'income', 'income', 'income', 'income'],\n    'category': ['Female', 'Male', '1-24', '25-54', '55+', 'Lo', 'Lo-Med', 'Med', 'High'],\n    'value': [60, 40, 50, 30, 20, 10, 25, 25, 40],\n})\ndf['variable'] = pd.Categorical(df['variable'], categories=['gender', 'age', 'income'])\ndf['category'] = pd.Categorical(df['category'], categories=df['category'])\n\ndf\n\n\n\n\n\n\n\n\nvariable\ncategory\nvalue\n\n\n\n\n0\ngender\nFemale\n60\n\n\n1\ngender\nMale\n40\n\n\n2\nage\n1-24\n50\n\n\n3\nage\n25-54\n30\n\n\n4\nage\n55+\n20\n\n\n5\nincome\nLo\n10\n\n\n6\nincome\nLo-Med\n25\n\n\n7\nincome\nMed\n25\n\n\n8\nincome\nHigh\n40\n\n\n\n\n\n\n\nWe want to visualise this data and at a galance get an idea to how the value breaks down along the categorys for the different variable. Note that each variable has different categorys.\nFirst we make a simple plot with all this information and see what to draw from it.\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAll the values along each variable add up to 100, but stacked together the difference within and without the groups is not clear. The solution is to dodge the bars.\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge'))                     # modified\n\n\n\n\nTwo variable bar plot\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThis is good, it gives us the plot we want but the legend is not great. Each variable has a different set of categorys, but the legend has them all clamped together. We cannot easily change the legend, but we can replicate itâ€™s purpose by labelling the individual bars.\nTo do this, we create a geom_text with position_dodge(width=0.9) to match the ratio of the space taken up by each variable. If there was no spacing between the bars of different variables, we would have width=1.\nA minor quack, when text extends beyond the limits we have to manually make space or it would get clipped. Therefore we adjust the bottom y limits.\n\ndodge_text = position_dodge(width=0.9)                              # new\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)   # modified\n + geom_text(aes(y=-.5, label='category'),                          # new\n             position=dodge_text,\n             color='gray', size=8, angle=45, va='top')\n + lims(y=(-5, 60))                                                 # new\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nWould it look too crowded if we add value labels on top of the bars?\n\ndodge_text = position_dodge(width=0.9)\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)\n + geom_text(aes(y=-.5, label='category'),\n             position=dodge_text,\n             color='gray', size=8, angle=45, va='top')\n + geom_text(aes(label='value'),                                    # new\n             position=dodge_text,\n             size=8, va='bottom', format_string='{}%')\n + lims(y=(-5, 60))\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat looks okay. The values line up with the categorys because we used the same dodge parameters. For the final polish, we remove the y-axis, clear out the panel and make the variable and category labels have the same color.\n\ndodge_text = position_dodge(width=0.9)\nccolor = '#555555'\n\n# Gallery Plot\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge', show_legend=False)\n + geom_text(aes(y=-.5, label='category'),\n             position=dodge_text,\n             color=ccolor, size=8, angle=45, va='top')              # modified\n + geom_text(aes(label='value'),\n             position=dodge_text,\n             size=8, va='bottom', format_string='{}%')\n + lims(y=(-5, 60))\n + theme(panel_background=element_rect(fill='white'),               # new\n         axis_title_y=element_blank(),\n         axis_line_x=element_line(color='black'),\n         axis_line_y=element_blank(),\n         axis_text_y=element_blank(),\n         axis_text_x=element_text(color=ccolor),\n         axis_ticks_major_y=element_blank(),\n         panel_grid=element_blank(),\n         panel_border=element_blank())\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nCredit: I saved a plot this example is based on a while ago and forgot/misplaced the link to the source. The user considered it a minor coup."
  },
  {
    "objectID": "test_nbs/geom_density.html",
    "href": "test_nbs/geom_density.html",
    "title": "Density Plot",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\nfrom plotnine import (\n    ggplot,\n    aes,\n    after_stat,\n    geom_density,\n    geom_histogram,\n    geom_vline,\n    geom_rect,\n    labs,\n    annotate,\n    theme_tufte\n)\nfrom plotnine.data import mpg\n\n\nmpg.head()\n\n\n\n\n\n\n\n\nmanufacturer\nmodel\ndispl\nyear\ncyl\ntrans\ndrv\ncty\nhwy\nfl\nclass\n\n\n\n\n0\naudi\na4\n1.8\n1999\n4\nauto(l5)\nf\n18\n29\np\ncompact\n\n\n1\naudi\na4\n1.8\n1999\n4\nmanual(m5)\nf\n21\n29\np\ncompact\n\n\n2\naudi\na4\n2.0\n2008\n4\nmanual(m6)\nf\n20\n31\np\ncompact\n\n\n3\naudi\na4\n2.0\n2008\n4\nauto(av)\nf\n21\n30\np\ncompact\n\n\n4\naudi\na4\n2.8\n1999\n6\nauto(l5)\nf\n16\n26\np\ncompact\n\n\n\n\n\n\n\nThe defaults are not exactly beautiful, but still quite clear.\n\n(ggplot(mpg, aes(x='cty'))\n + geom_density()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nPlotting multiple groups is straightforward, but as each group is plotted as an independent PDF summing to 1, the relative size of each group will be normalized.\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(alpha=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo plot multiple groups and scale them by their relative size, you can map the y aesthetic to 'count' (calculated by stat_density).\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(aes(y=after_stat('count')), alpha=0.1)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nDensity Plot + Histogram\nTo overlay a histogram onto the density, the y aesthetic of the density should be mapped to the 'count' scaled by the binwidth of the histograms.\nWhy?\nThe count calculated by stat_density is \\(count = density * n\\) where n is the number of points . The density curves have an area of 1 and have no information about the absolute frequency of the values along curve; only the relative frequencies. The count curve reveals the absolute frequencies. The scale of this count corresponds to the count calculated by the stat_bin for the histogram when the bins are 1 unit wide i.e.Â binwidth=1. The count * binwidth curve matches the scale of counts for the histogram for a give binwidth.\n\nbinwidth = 2  # The same for geom_density and geom_histogram\n\n(ggplot(mpg, aes(x='cty', color='drv', fill='drv'))\n + geom_density(aes(y=after_stat('count*binwidth')), alpha=0.1)\n + geom_histogram(aes(fill='drv', y=after_stat('count')), binwidth=binwidth, color='none', alpha=0.5)\n \n # It is the histogram that gives us the meaningful y axis label\n # i.e. 'count' and not 'count*2'\n + labs(y='count')\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\nShading a Region under a Density Curve\nExtending geom_density to create an effect of a shaded region\nCreate some data and plot the density\n\nn = 101\ndf = pd.DataFrame({'x': np.arange(n)})\n\n(ggplot(df, aes('x'))\n + geom_density()\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSuppose we want to mark a region as special e.g.Â (40, 60), we can use vertical lines to annotate it.\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + annotate(geom_vline, xintercept=region)  #new line\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo make it standout more we can highlight. To do that, the first thought is to use a rectangle.\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + annotate(geom_rect, xmin=region[0], xmax=region[1], ymin=0, ymax=float('inf'), alpha=0.5) # new line\n + annotate(geom_vline, xintercept=region)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nSince y upper-bound varies along the curve, a rectangular highlight has to stretch up to the top of the panel.\nTo hightlight only within the density curve, we have to use a second density curve. We need to calculate the density as normal, but just before the curve & region are plotted, we should keep only the region we want.\nWe create our own geom_density_highlight and override the setup_data method. First, we override but do nothing, we only inspect the data to see what we have to work with.\n\n# new class\nclass geom_density_highlight(geom_density):\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        print(data)\n        return data\n\n\nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + geom_density_highlight(fill='black', alpha=0.5)  # new line\n + annotate(geom_vline, xintercept=region)\n)\n\n      PANEL     count   density  group    n    scaled           x         y   \n0         1  0.519038  0.005139     -1  101  0.519039    0.000000  0.005139  \\\n1         1  0.522757  0.005176     -1  101  0.522758    0.097752  0.005176   \n2         1  0.526473  0.005213     -1  101  0.526474    0.195503  0.005213   \n3         1  0.530187  0.005249     -1  101  0.530188    0.293255  0.005249   \n4         1  0.533899  0.005286     -1  101  0.533900    0.391007  0.005286   \n...     ...       ...       ...    ...  ...       ...         ...       ...   \n1019      1  0.533899  0.005286     -1  101  0.533900   99.608993  0.005286   \n1020      1  0.530187  0.005249     -1  101  0.530188   99.706745  0.005249   \n1021      1  0.526473  0.005213     -1  101  0.526474   99.804497  0.005213   \n1022      1  0.522757  0.005176     -1  101  0.522758   99.902248  0.005176   \n1023      1  0.519038  0.005139     -1  101  0.519039  100.000000  0.005139   \n\n      ymin      ymax  \n0        0  0.005139  \n1        0  0.005176  \n2        0  0.005213  \n3        0  0.005249  \n4        0  0.005286  \n...    ...       ...  \n1019     0  0.005286  \n1020     0  0.005249  \n1021     0  0.005213  \n1022     0  0.005176  \n1023     0  0.005139  \n\n[1024 rows x 10 columns]\n\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe highlight has filled the whole region, but the printed data suggests that we can limit the rows to those where x column is within our region.\n\nclass geom_density_highlight(geom_density):\n    \n    # new method\n    def __init__(self, *args, region=(-np.inf, np.inf), **kwargs):\n        super().__init__(*args, **kwargs)\n        self.region = region\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        s = f'{self.region[0]} &lt;= x &lt;= {self.region[1]}'  # new line\n        data = data.query(s).reset_index(drop=True)       # new line\n        return data\n\n    \nregion = (40, 60)\n\n(ggplot(df, aes('x'))\n + geom_density()\n + geom_density_highlight(region=region, fill='black', alpha=0.5) # modified line\n + annotate(geom_vline, xintercept=region)\n)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThat is it, but we can make it look better.\n\nclass geom_density_highlight(geom_density):\n\n    def __init__(self, *args, region=(-np.inf, np.inf), **kwargs):\n        super().__init__(*args, **kwargs)\n        self.region = region\n    \n    def setup_data(self, data):\n        data = super().setup_data(data)\n        s = f'{self.region[0]} &lt;= x &lt;= {self.region[1]}'\n        data = data.query(s).reset_index(drop=True)\n        return data\n\n\nregion = (40, 60)\nteal = '#029386'\n\n# Gallery Plot\n\n(ggplot(df, aes('x'))\n + geom_density_highlight(region=region, fill=teal+'88', color='none')\n + geom_density(fill=teal+'44', color=teal, size=.7)\n + annotate(geom_vline, xintercept=region, color=teal, size=.7)\n + theme_tufte()\n)\n\n\n\n\nShading a region under a density curve\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThis example was motivated by a question from github user Rishika-Ravindran."
  },
  {
    "objectID": "thumb.html",
    "href": "thumb.html",
    "title": "thumb",
    "section": "",
    "text": "Note: this only works for png images. Other file types will not work at the moment.\n\nsource\n\n\n\n get_img (nb_path, label='thumbnail')\n\nGet image from notebook with a quarto cell directive with #|label: {label}\nget_img allows you to get images from cells that contain a certain label. For example, consider the following cell in test_nbs/geom_col.ipynb:\n#|label: two_variable_bar_plot\n#|fig-cap: Two variable bar plot\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge'))\nYou can extract the plot from that notebook like this:\n\nimg = get_img('test_nbs/geom_col.ipynb', label='two_variable_bar_plot')\nimg\n\n\n\n\n\n# test if you provide a label that doesn't exist\ntest_fail(get_img, contains='test_nbs/geom_col.ipynb does not contain a cell with `#|label: does_not_exist`', \n          args=('test_nbs/geom_col.ipynb', 'does_not_exist'))\n\n# test if you label a cell that doesn't have a plot like a dataframe\ntest_fail(get_img, contains='test_nbs/geom_col.ipynb: cell with `#|label: no_plot` does not have an output type of `display_data`',\n          args=('test_nbs/geom_col.ipynb', 'no_plot'))\n\n# make sure image is a PngImageFile\nassert isinstance(img, Image.Image)"
  },
  {
    "objectID": "thumb.html#get-an-image-from-a-notebook",
    "href": "thumb.html#get-an-image-from-a-notebook",
    "title": "thumb",
    "section": "",
    "text": "Note: this only works for png images. Other file types will not work at the moment.\n\nsource\n\n\n\n get_img (nb_path, label='thumbnail')\n\nGet image from notebook with a quarto cell directive with #|label: {label}\nget_img allows you to get images from cells that contain a certain label. For example, consider the following cell in test_nbs/geom_col.ipynb:\n#|label: two_variable_bar_plot\n#|fig-cap: Two variable bar plot\n\n(ggplot(df, aes(x='variable', y='value', fill='category'))\n + geom_col(stat='identity', position='dodge'))\nYou can extract the plot from that notebook like this:\n\nimg = get_img('test_nbs/geom_col.ipynb', label='two_variable_bar_plot')\nimg\n\n\n\n\n\n# test if you provide a label that doesn't exist\ntest_fail(get_img, contains='test_nbs/geom_col.ipynb does not contain a cell with `#|label: does_not_exist`', \n          args=('test_nbs/geom_col.ipynb', 'does_not_exist'))\n\n# test if you label a cell that doesn't have a plot like a dataframe\ntest_fail(get_img, contains='test_nbs/geom_col.ipynb: cell with `#|label: no_plot` does not have an output type of `display_data`',\n          args=('test_nbs/geom_col.ipynb', 'no_plot'))\n\n# make sure image is a PngImageFile\nassert isinstance(img, Image.Image)"
  },
  {
    "objectID": "thumb.html#turn-image-into-thumbnail",
    "href": "thumb.html#turn-image-into-thumbnail",
    "title": "thumb",
    "section": "Turn image into thumbnail",
    "text": "Turn image into thumbnail\nThe image above is too big! We can turn it into a thumbnail like so:\n\nsource\n\nimg2thumb\n\n img2thumb (img:PIL.Image.Image, size=(260, 260))\n\nConvert image to thumbnail.\n\nimg2thumb(img)"
  },
  {
    "objectID": "thumb.html#get-a-thumbnail-directly-from-a-notebook",
    "href": "thumb.html#get-a-thumbnail-directly-from-a-notebook",
    "title": "thumb",
    "section": "Get a thumbnail directly from a notebook",
    "text": "Get a thumbnail directly from a notebook\n\nsource\n\nnb2thumb\n\n nb2thumb (nb_path, label='thumbnail', size=(260, 260))\n\nExtract thumbnail corresponding to the cell with the comment #|label: {label} from a notebook.\nnb2thumb allows us to get a thumbnail directly from a notebook:\n\nthumb = nb2thumb('test_nbs/geom_col.ipynb', label='two_variable_bar_plot')\nthumb"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nb-thumb",
    "section": "",
    "text": "pip install nb_thumb"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nb-thumb",
    "section": "",
    "text": "pip install nb_thumb"
  },
  {
    "objectID": "index.html#quickstart",
    "href": "index.html#quickstart",
    "title": "nb-thumb",
    "section": "Quickstart",
    "text": "Quickstart\n\nShow A thumbnail\n\nfrom nb_thumb import nb2thumb\n\n\nnb2thumb(nb_path='test_nbs/geom_col.ipynb', \n         label='two_variable_bar_plot',\n         size=(200,200))\n\n\n\n\n\n\nShow A Gallery\nThis will show a gallery of plots from notebooks.\n\nfrom nb_thumb import gallery\n\n\n\n\n\n\n\nUse output: asis\n\n\n\nWhen using nb_thumb.gallery you should always set the Quarto directive #|output: asis so that the markdown is rendered correctly in quarto.\nSee raw output for more information.\n\n\n\nplots = \\\n[dict(nb_path= 'test_nbs/geom_col.ipynb', label='two_variable_bar_plot'),\ndict(nb_path='test_nbs/PlotnineAnimation.ipynb', label='spiral'),\ndict(nb_path='test_nbs/geom_density.ipynb', label='density_curve'),\ndict(nb_path='test_nbs/geom_map.ipynb', label='map'),\ndict(nb_path='test_nbs/geom_segment.ipynb', label='ranges'),\ndict(nb_path='test_nbs/geom_segment.ipynb', label='rank')]\n\n```{python}\n#|output: asis\nprint(gallery(plots))\n```\n\n\n\nTwo Variable Bar Plot\n\n\n\nSpiral\n\n\n\nDensity Curve\n\n\n\nMap\n\n\n\nRanges\n\n\n\nRank"
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "nb-thumb",
    "section": "Usage",
    "text": "Usage\nFor more information and examples, see the docs."
  },
  {
    "objectID": "gallery.html",
    "href": "gallery.html",
    "title": "gallery",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "gallery.html#create-a-gallery",
    "href": "gallery.html#create-a-gallery",
    "title": "gallery",
    "section": "Create a gallery",
    "text": "Create a gallery\n\nsource\n\ngallery\n\n gallery (plots:list[dict])\n\nArrange plots into a gallery.\n\n\n\n\nType\nDetails\n\n\n\n\nplots\nlist\na list of dictionaries which contain arguments for emb_img.\n\n\nReturns\nstr\n\n\n\n\nTo use gallery, you must construct a list of dicts whose keys are arguments to emb_img:\n\nplots = \\\n[\ndict(nb_path= 'test_nbs/geom_col.ipynb', \n      label='two_variable_bar_plot'),\ndict(nb_path='test_nbs/PlotnineAnimation.ipynb', \n     label='spiral'),\ndict(nb_path='test_nbs/geom_density.ipynb', \n     label='density_curve'),\ndict(nb_path='test_nbs/geom_map.ipynb', \n     label='map'),\ndict(nb_path='test_nbs/geom_segment.ipynb', \n     label='ranges'),\ndict(nb_path='test_nbs/geom_segment.ipynb',\n     label='rank')\n]\n\n\n\n\n\n\n\nCustomize your css styles\n\n\n\nFor this gallery to show up well in Quarto, we recommend including the following css in your quarto project:\n/* css styles */\n.plot-gallery {\n  height: 175px;\n  object-fit: contain;\n}\nNote that the class plot-gallery is inserted by gallery around each image.\n\n\nprint(gallery(plots))\n\n\n\nTwo Variable Bar Plot\n\n\n\nSpiral\n\n\n\nDensity Curve\n\n\n\nMap\n\n\n\nRanges\n\n\n\nRank"
  },
  {
    "objectID": "test_nbs/geom_segment.html",
    "href": "test_nbs/geom_segment.html",
    "title": "Ranges of Similar Variables",
    "section": "",
    "text": "# NOTE: This notebook uses the polars package\nimport pandas as pd\nimport pandas.api.types as pdtypes\nimport numpy as np\n\nfrom plotnine import *\nimport polars as pl\nfrom polars import col\n\nComparing the point to point difference of many similar variables\nRead the data.\nSource: Pew Research Global Attitudes Spring 2015\n\n!head -n 20 'data/survey-social-media.csv'\n\nPSRAID,COUNTRY,Q145,Q146,Q70,Q74\n100000,Ethiopia,Female,35,No, \n100001,Ethiopia,Female,25,No, \n100002,Ethiopia,Male,40,Donâ€™t know, \n100003,Ethiopia,Female,30,Donâ€™t know, \n100004,Ethiopia,Male,22,No, \n100005,Ethiopia,Male,40,No, \n100006,Ethiopia,Female,20,No, \n100007,Ethiopia,Female,18,No,No\n100008,Ethiopia,Male,50,No, \n100009,Ethiopia,Male,35,No, \n100010,Ethiopia,Female,20,No, \n100011,Ethiopia,Female,30,Donâ€™t know, \n100012,Ethiopia,Male,60,No, \n100013,Ethiopia,Male,18,No, \n100014,Ethiopia,Male,40,No, \n100015,Ethiopia,Male,28,Donâ€™t know, \n100016,Ethiopia,Female,55,Donâ€™t know, \n100017,Ethiopia,Male,30,Donâ€™t know, \n100018,Ethiopia,Female,22,No, \n\n\n\ncolumns = dict(\n    COUNTRY='country',\n    Q145='gender',\n    Q146='age',\n    Q70='use_internet',\n    Q74='use_social_media'\n)\n\ndata = pl.scan_csv(\n    'data/survey-social-media.csv',\n    dtypes=dict(Q146=pl.Utf8),\n).rename(\n    columns\n).select([\n    'country',\n    'age',\n    'use_social_media'\n]).collect()\n\ndata.sample(10, seed=123)\n\n\n\n\nshape: (10, 3)\n\n\n\n\ncountry\n\n\nage\n\n\nuse_social_media\n\n\n\n\nstr\n\n\nstr\n\n\nstr\n\n\n\n\n\n\n\"Venezuela\"\n\n\n\"47\"\n\n\n\"Yes\"\n\n\n\n\n\"Israel\"\n\n\n\"63\"\n\n\n\" \"\n\n\n\n\n\"Germany\"\n\n\n\"60\"\n\n\n\"Yes\"\n\n\n\n\n\"France\"\n\n\n\"60\"\n\n\n\"No\"\n\n\n\n\n\"Philippines\"\n\n\n\"25\"\n\n\n\" \"\n\n\n\n\n\"China\"\n\n\n\"40\"\n\n\n\" \"\n\n\n\n\n\"Senegal\"\n\n\n\"20\"\n\n\n\" \"\n\n\n\n\n\"Argentina\"\n\n\n\"47\"\n\n\n\"Yes\"\n\n\n\n\n\"India\"\n\n\n\"53\"\n\n\n\"No\"\n\n\n\n\n\"Jordan\"\n\n\n\"24\"\n\n\n\" \"\n\n\n\n\n\n\n\nCreate age groups for users of social media\n\nyes_no = ['Yes', 'No']\nvalid_age_groups = ['18-34', '35-49', '50+']\n\nrdata = data.with_columns([\n    pl\n    .when(col('age') &lt;= '34').then('18-34')\n    .when(col('age') &lt;= '49').then('35-49')\n    .when(col('age') &lt; '98').then('50+')\n    .otherwise(\"\")\n    .alias('age_group'),\n    pl.count().over(\"country\").alias('country_count')\n]).filter(\n    col('age_group').is_in(valid_age_groups) &\n    col('use_social_media').is_in(yes_no)\n).groupby(['country', 'age_group']).agg([\n    # social media use percentage\n    ((col('use_social_media') == 'Yes').sum() * 100 / pl.count()).alias('sm_use_percent'),\n    \n    # social media question response rate\n    (col('use_social_media').is_in(yes_no).sum() * 100 / col('country_count').first()).alias('smq_response_rate')\n]).sort(['country', 'age_group'])\n\nrdata.head()\n\n\n\n\nshape: (5, 4)\n\n\n\n\ncountry\n\n\nage_group\n\n\nsm_use_percent\n\n\nsmq_response_rate\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\n\n\n\n\n\"Argentina\"\n\n\n\"18-34\"\n\n\n90.883191\n\n\n35.1\n\n\n\n\n\"Argentina\"\n\n\n\"35-49\"\n\n\n84.40367\n\n\n21.8\n\n\n\n\n\"Argentina\"\n\n\n\"50+\"\n\n\n67.333333\n\n\n15.0\n\n\n\n\n\"Australia\"\n\n\n\"18-34\"\n\n\n90.862944\n\n\n19.621514\n\n\n\n\n\"Australia\"\n\n\n\"35-49\"\n\n\n78.04878\n\n\n20.418327\n\n\n\n\n\n\n\nTop 14 countries by response rate to the social media question.\n\ndef col_format(name, fmt):\n    # Format useing python formating\n    # for more control over\n    return col(name).apply(lambda x: fmt.format(x=x))\n\ndef float_to_str_round(name):\n    return col_format(name, '{x:.0f}')\n\nn = 14\n\ntop = rdata.groupby('country').agg([\n    col('smq_response_rate').sum().alias('r')\n]).sort('r', reverse=True).head(n)\ntop_countries = top['country']\n\nexpr = float_to_str_round('sm_use_percent')\nexpr_pct = expr + '%'\n\npoint_data = rdata.filter(\n    col('country').is_in(top_countries)\n).with_column(\n    pl.when(col('country') == 'France').then(expr_pct).otherwise(expr).alias('sm_use_percent_str')\n)\n\npoint_data.head()\n\n\n\n\nshape: (5, 5)\n\n\n\n\ncountry\n\n\nage_group\n\n\nsm_use_percent\n\n\nsmq_response_rate\n\n\nsm_use_percent_str\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nstr\n\n\n\n\n\n\n\"Australia\"\n\n\n\"18-34\"\n\n\n90.862944\n\n\n19.621514\n\n\n\"91\"\n\n\n\n\n\"Australia\"\n\n\n\"35-49\"\n\n\n78.04878\n\n\n20.418327\n\n\n\"78\"\n\n\n\n\n\"Australia\"\n\n\n\"50+\"\n\n\n48.479087\n\n\n52.390438\n\n\n\"48\"\n\n\n\n\n\"Canada\"\n\n\n\"18-34\"\n\n\n92.063492\n\n\n25.099602\n\n\n\"92\"\n\n\n\n\n\"Canada\"\n\n\n\"35-49\"\n\n\n75.925926\n\n\n21.513944\n\n\n\"76\"\n\n\n\n\n\n\n\n\nsegment_data = point_data.groupby('country').agg([\n    col('sm_use_percent').min().alias('min'),\n    col('sm_use_percent').max().alias('max'),\n]).with_column(\n    (col('max') - col('min')).alias('gap')\n).sort(\n    'gap',\n).with_columns([\n    float_to_str_round('min').alias('min_str'),\n    float_to_str_round('max').alias('max_str'),\n    float_to_str_round('gap').alias('gap_str')\n])\n\nsegment_data.head()\n\n\n\n\nshape: (5, 7)\n\n\n\n\ncountry\n\n\nmin\n\n\nmax\n\n\ngap\n\n\nmin_str\n\n\nmax_str\n\n\ngap_str\n\n\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\nstr\n\n\n\n\n\n\n\"Russia\"\n\n\n76.07362\n\n\n95.151515\n\n\n19.077896\n\n\n\"76\"\n\n\n\"95\"\n\n\n\"19\"\n\n\n\n\n\"Israel\"\n\n\n55.405405\n\n\n88.311688\n\n\n32.906283\n\n\n\"55\"\n\n\n\"88\"\n\n\n\"33\"\n\n\n\n\n\"United Kingdom...\n\n\n52.74463\n\n\n86.096257\n\n\n33.351627\n\n\n\"53\"\n\n\n\"86\"\n\n\n\"33\"\n\n\n\n\n\"United States\"\n\n\n52.597403\n\n\n88.669951\n\n\n36.072548\n\n\n\"53\"\n\n\n\"89\"\n\n\n\"36\"\n\n\n\n\n\"Canada\"\n\n\n53.986333\n\n\n92.063492\n\n\n38.077159\n\n\n\"54\"\n\n\n\"92\"\n\n\n\"38\"\n\n\n\n\n\n\n\nFormat the floating point data that will be plotted into strings\nSet the order of the countries along the y-axis by setting the country variable to an ordered categorical.\n\ncountry_expr = col('country').cast(pl.Categorical)\nsegment_data = segment_data.with_column(country_expr)\npoint_data = point_data.with_columns(country_expr)\n\nFirst plot\n\n# The right column (youngest-oldest gap) location\nxgap = 112\n\n(ggplot()\n # Range strip\n + geom_segment(\n     segment_data,\n     aes(x='min', xend='max', y='country', yend='country'),\n     size=6,\n     color='#a7a9ac'\n )\n # Age group markers\n + geom_point(\n     point_data,\n     aes('sm_use_percent', 'country', color='age_group', fill='age_group'),\n     size=5,\n     stroke=0.7,\n )\n # Age group percentages\n + geom_text(\n     point_data.filter(col('age_group')==\"50+\"),\n     aes(x='sm_use_percent-2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='right'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"35-49\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str'),\n     size=8,\n     ha='left',\n     va='center',\n     color='white'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"18-34\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='left',\n )\n # gap difference\n + geom_text(\n     segment_data,\n     aes(x=xgap, y='country', label='gap_str'),\n     size=9,\n     fontweight='bold',\n     format_string='+{}'\n )\n)\n\n\n\n\nTweak it\n\n# The right column (youngest-oldest gap) location\nxgap = 115\n\n# Gallery Plot\n\n(ggplot()\n # Background Strips                                     # new\n + geom_segment(\n     segment_data,\n     aes(y='country', yend='country'),\n     x=0, xend=100,\n     size=8.5,\n     color='#edece3'\n )\n # vertical grid lines along the strips                  # new\n + annotate(\n     'segment',\n     x=list(range(10, 100, 10)) * n,\n     xend=list(range(10, 100, 10)) * n,\n     y=np.tile(np.arange(1, n+1), 9)-.25,\n     yend=np.tile(np.arange(1, n+1), 9) + .25,\n     color='#CCCCCC'\n )\n # Range strip\n + geom_segment(\n     segment_data,\n     aes(x='min', xend='max', y='country', yend='country'),\n     size=6,\n     color='#a7a9ac'\n )\n # Age group markers\n + geom_point(\n     point_data,\n     aes('sm_use_percent', 'country', color='age_group', fill='age_group'),\n     size=5,\n     stroke=0.7,\n )\n # Age group percentages\n + geom_text(\n     point_data.filter(col('age_group')==\"50+\"),\n     aes(x='sm_use_percent-2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='right',\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"35-49\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str'),\n     size=8,\n     ha='left',\n     va='center',\n     color='white'\n )\n + geom_text(\n     point_data.filter(col('age_group')==\"18-34\"),\n     aes(x='sm_use_percent+2', y='country', label='sm_use_percent_str', color='age_group'),\n     size=8,\n     ha='left',\n )\n # countries right-hand-size (instead of y-axis)         # new\n + geom_text(\n     segment_data,\n     aes(y='country', label='country'),\n     x=-1,\n     size=8,\n     ha='right',\n     fontweight='bold',\n     color='#222222'\n )\n # gap difference\n + geom_vline(xintercept=xgap, color='#edece3', size=32)  # new\n + geom_text(\n     segment_data,\n     aes(x=xgap, y='country', label='gap_str'),\n     size=9,\n     fontweight='bold',\n     format_string='+{}'\n )\n # Annotations                                            # new\n + annotate('text', x=31, y=n+1.1, label='50+', size=9, color='#ea9f2f', va='top')\n + annotate('text', x=56, y=n+1.1, label='35-49', size=9, color='#6d6e71', va='top')\n + annotate('text', x=85, y=n+1.1, label='18-34', size=9, color='#939c49', va='top')\n + annotate('text', x=xgap, y=n+.5, label='Youngest-\\nOldest Gap', size=9, color='#444444', va='bottom', ha='center')\n + annotate('point', x=[31, 56, 85], y=n+.3, alpha=0.85, stroke=0)\n + annotate('segment', x=[31, 56, 85], xend=[31, 56, 85], y=n+.3, yend=n+.8, alpha=0.85)\n + annotate('hline', yintercept=[x+0.5 for x in range(2, n, 2)], alpha=.5, linetype='dotted', size=0.7)\n \n # Better spacing and color                              # new\n + scale_x_continuous(limits=(-18, xgap+2))\n + scale_y_discrete(expand=(0, 0.25, 0.1, 0))\n + scale_fill_manual(values=['#c3ca8c', '#d1d3d4', '#f2c480'])\n + scale_color_manual(values=['#939c49', '#6d6e71', '#ea9f2f'])\n + guides(color=None, fill=None)\n + theme_void()\n + theme(figure_size=(8, 8.5))\n)\n\n\n\n\nRanges of similar variables\n\n\n\n\nInstead of looking at this plot as having a country variable on the y-axis and a percentage variable on the x-axis, we can view it as having vertically stacked up many indepedent variables, the values of which have a similar scale.\nProtip: Save a pdf file.\n\nChange in Rank\nComparing a group of ranked items at two different times\nRead the data.\nSource: World Bank - Infanct Mortality Rate (per 1,000 live births)b\n\ndata = pl.read_csv(\n    'data/API_SP.DYN.IMRT.IN_DS2_en_csv_v2/API_SP.DYN.IMRT.IN_DS2_en_csv_v2.csv',\n    skip_rows=4,\n    null_values=\"\",\n)\n\n# Columns as valid python variables\nyear_columns = {c: f'y{c}' for c in data.columns if c[:2] in {'19', '20'}}\ndata = data.rename({\n    'Country Name': 'country',\n    'Country Code': 'code',\n    **year_columns\n}).drop(['Indicator Name', 'Indicator Code'])\ndata.head()\n\n\n\n\nshape: (5, 59)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\n\n\n\n\n\"Aruba\"\n\n\n\"ABW\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n\n\n\"Afghanistan\"\n\n\n\"AFG\"\n\n\nnull\n\n\n240.5\n\n\n236.3\n\n\n232.3\n\n\n228.5\n\n\n224.6\n\n\n220.7\n\n\n217.0\n\n\n213.3\n\n\n209.8\n\n\n206.1\n\n\n202.2\n\n\n198.2\n\n\n194.3\n\n\n190.3\n\n\n186.6\n\n\n182.6\n\n\n178.7\n\n\n174.5\n\n\n170.4\n\n\n166.1\n\n\n161.8\n\n\n157.5\n\n\n153.2\n\n\n148.7\n\n\n144.5\n\n\n140.2\n\n\n135.7\n\n\n131.3\n\n\n126.8\n\n\n122.5\n\n\n118.3\n\n\n114.4\n\n\n110.9\n\n\n107.7\n\n\n105.0\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.2\n\n\n95.4\n\n\n93.4\n\n\n91.2\n\n\n89.0\n\n\n86.7\n\n\n84.4\n\n\n82.3\n\n\n80.4\n\n\n78.6\n\n\n76.8\n\n\n75.1\n\n\n73.4\n\n\n71.7\n\n\n69.9\n\n\n68.1\n\n\n66.3\n\n\nnull\n\n\n\n\n\"Angola\"\n\n\n\"AGO\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n138.3\n\n\n137.5\n\n\n136.8\n\n\n136.0\n\n\n135.3\n\n\n134.9\n\n\n134.4\n\n\n134.1\n\n\n133.8\n\n\n133.6\n\n\n133.5\n\n\n133.5\n\n\n133.5\n\n\n133.4\n\n\n133.2\n\n\n132.8\n\n\n132.3\n\n\n131.5\n\n\n130.6\n\n\n129.5\n\n\n128.3\n\n\n126.9\n\n\n125.5\n\n\n124.1\n\n\n122.8\n\n\n121.2\n\n\n119.4\n\n\n117.1\n\n\n114.7\n\n\n112.2\n\n\n109.6\n\n\n106.8\n\n\n104.1\n\n\n101.4\n\n\n98.8\n\n\n96.0\n\n\nnull\n\n\n\n\n\"Albania\"\n\n\n\"ALB\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n73.0\n\n\n68.4\n\n\n64.0\n\n\n59.9\n\n\n56.1\n\n\n52.4\n\n\n49.1\n\n\n45.9\n\n\n43.2\n\n\n40.8\n\n\n38.6\n\n\n36.7\n\n\n35.1\n\n\n33.7\n\n\n32.5\n\n\n31.4\n\n\n30.3\n\n\n29.1\n\n\n27.9\n\n\n26.8\n\n\n25.5\n\n\n24.4\n\n\n23.2\n\n\n22.1\n\n\n21.0\n\n\n20.0\n\n\n19.1\n\n\n18.3\n\n\n17.4\n\n\n16.7\n\n\n16.0\n\n\n15.4\n\n\n14.8\n\n\n14.3\n\n\n13.8\n\n\n13.3\n\n\n12.9\n\n\n12.5\n\n\nnull\n\n\n\n\n\"Andorra\"\n\n\n\"AND\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n7.5\n\n\n7.0\n\n\n6.5\n\n\n6.1\n\n\n5.6\n\n\n5.2\n\n\n5.0\n\n\n4.6\n\n\n4.3\n\n\n4.1\n\n\n3.9\n\n\n3.7\n\n\n3.5\n\n\n3.3\n\n\n3.2\n\n\n3.1\n\n\n2.9\n\n\n2.8\n\n\n2.7\n\n\n2.6\n\n\n2.5\n\n\n2.4\n\n\n2.3\n\n\n2.2\n\n\n2.1\n\n\n2.1\n\n\nnull\n\n\n\n\n\n\n\nThe data includes regional aggregates. To tell apart the regional aggregates we need the metadata. Every row in the data table has a corresponding row in the metadata table. Where the row has regional aggregate data, the Region column in the metadata table is NaN.\n\ndef ordered_categorical(s, categories=None):\n    \"\"\"\n    Create a categorical ordered according to the categories\n    \"\"\"\n    name = getattr(s, 'name', '')\n    if categories is None:\n        return pl.Series(name, s).cast(pl.Categorical)\n\n    with pl.StringCache():\n        pl.Series(categories).cast(pl.Categorical)\n        return pl.Series(name, s).cast(pl.Categorical)\n\ncolumns = {\n    'Country Code': 'code',\n    'Region': 'region',\n    'IncomeGroup': 'income_group'\n}\n\nmetadata = pl.scan_csv(\n    'data/API_SP.DYN.IMRT.IN_DS2_en_csv_v2/Metadata_Country_API_SP.DYN.IMRT.IN_DS2_en_csv_v2.csv'\n).rename(\n    columns\n).select(\n    list(columns.values())\n).filter(\n    # Drop the regional aggregate information\n    (col('region') != '') & (col('income_group') != '')\n).collect()\n\ncat_order = ['High income', 'Upper middle income', 'Lower middle income', 'Low income']\nmetadata = metadata.with_columns([\n    ordered_categorical(metadata['income_group'], cat_order)\n])\n\nmetadata.head(10)\n\n\n\n\nshape: (10, 3)\n\n\n\n\ncode\n\n\nregion\n\n\nincome_group\n\n\n\n\nstr\n\n\nstr\n\n\ncat\n\n\n\n\n\n\n\"ABW\"\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\"AFG\"\n\n\n\"South Asia\"\n\n\n\"Low income\"\n\n\n\n\n\"AGO\"\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n\n\n\"ALB\"\n\n\n\"Europe & Centr...\n\n\n\"Upper middle i...\n\n\n\n\n\"AND\"\n\n\n\"Europe & Centr...\n\n\n\"High income\"\n\n\n\n\n\"ARE\"\n\n\n\"Middle East & ...\n\n\n\"High income\"\n\n\n\n\n\"ARG\"\n\n\n\"Latin America ...\n\n\n\"Upper middle i...\n\n\n\n\n\"ARM\"\n\n\n\"Europe & Centr...\n\n\n\"Lower middle i...\n\n\n\n\n\"ASM\"\n\n\n\"East Asia & Pa...\n\n\n\"Upper middle i...\n\n\n\n\n\"ATG\"\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\n\n\nRemove the regional aggregates, to create a table with only country data\n\ncountry_data = data.join(metadata, on='code')\ncountry_data.head()\n\n\n\n\nshape: (5, 61)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\nregion\n\n\nincome_group\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\ncat\n\n\n\n\n\n\n\"Aruba\"\n\n\n\"ABW\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n\"Latin America ...\n\n\n\"High income\"\n\n\n\n\n\"Afghanistan\"\n\n\n\"AFG\"\n\n\nnull\n\n\n240.5\n\n\n236.3\n\n\n232.3\n\n\n228.5\n\n\n224.6\n\n\n220.7\n\n\n217.0\n\n\n213.3\n\n\n209.8\n\n\n206.1\n\n\n202.2\n\n\n198.2\n\n\n194.3\n\n\n190.3\n\n\n186.6\n\n\n182.6\n\n\n178.7\n\n\n174.5\n\n\n170.4\n\n\n166.1\n\n\n161.8\n\n\n157.5\n\n\n153.2\n\n\n148.7\n\n\n144.5\n\n\n140.2\n\n\n135.7\n\n\n131.3\n\n\n126.8\n\n\n122.5\n\n\n118.3\n\n\n114.4\n\n\n110.9\n\n\n107.7\n\n\n105.0\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.2\n\n\n95.4\n\n\n93.4\n\n\n91.2\n\n\n89.0\n\n\n86.7\n\n\n84.4\n\n\n82.3\n\n\n80.4\n\n\n78.6\n\n\n76.8\n\n\n75.1\n\n\n73.4\n\n\n71.7\n\n\n69.9\n\n\n68.1\n\n\n66.3\n\n\nnull\n\n\n\"South Asia\"\n\n\n\"Low income\"\n\n\n\n\n\"Angola\"\n\n\n\"AGO\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n138.3\n\n\n137.5\n\n\n136.8\n\n\n136.0\n\n\n135.3\n\n\n134.9\n\n\n134.4\n\n\n134.1\n\n\n133.8\n\n\n133.6\n\n\n133.5\n\n\n133.5\n\n\n133.5\n\n\n133.4\n\n\n133.2\n\n\n132.8\n\n\n132.3\n\n\n131.5\n\n\n130.6\n\n\n129.5\n\n\n128.3\n\n\n126.9\n\n\n125.5\n\n\n124.1\n\n\n122.8\n\n\n121.2\n\n\n119.4\n\n\n117.1\n\n\n114.7\n\n\n112.2\n\n\n109.6\n\n\n106.8\n\n\n104.1\n\n\n101.4\n\n\n98.8\n\n\n96.0\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n\n\n\"Albania\"\n\n\n\"ALB\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n73.0\n\n\n68.4\n\n\n64.0\n\n\n59.9\n\n\n56.1\n\n\n52.4\n\n\n49.1\n\n\n45.9\n\n\n43.2\n\n\n40.8\n\n\n38.6\n\n\n36.7\n\n\n35.1\n\n\n33.7\n\n\n32.5\n\n\n31.4\n\n\n30.3\n\n\n29.1\n\n\n27.9\n\n\n26.8\n\n\n25.5\n\n\n24.4\n\n\n23.2\n\n\n22.1\n\n\n21.0\n\n\n20.0\n\n\n19.1\n\n\n18.3\n\n\n17.4\n\n\n16.7\n\n\n16.0\n\n\n15.4\n\n\n14.8\n\n\n14.3\n\n\n13.8\n\n\n13.3\n\n\n12.9\n\n\n12.5\n\n\nnull\n\n\n\"Europe & Centr...\n\n\n\"Upper middle i...\n\n\n\n\n\"Andorra\"\n\n\n\"AND\"\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\nnull\n\n\n7.5\n\n\n7.0\n\n\n6.5\n\n\n6.1\n\n\n5.6\n\n\n5.2\n\n\n5.0\n\n\n4.6\n\n\n4.3\n\n\n4.1\n\n\n3.9\n\n\n3.7\n\n\n3.5\n\n\n3.3\n\n\n3.2\n\n\n3.1\n\n\n2.9\n\n\n2.8\n\n\n2.7\n\n\n2.6\n\n\n2.5\n\n\n2.4\n\n\n2.3\n\n\n2.2\n\n\n2.1\n\n\n2.1\n\n\nnull\n\n\n\"Europe & Centr...\n\n\n\"High income\"\n\n\n\n\n\n\n\nWe are interested in the changes in rank between 1960 and 2015. To plot a reasonable sized graph, we randomly sample 35 countries.\n\nsampled_data = country_data.drop_nulls(\n    subset=['y1960', 'y2015']\n).sample(\n    n=35,\n    seed=123\n).with_columns([\n    col('y1960').rank(method='ordinal').cast(pl.Int64).suffix('_rank'),\n    col('y2015').rank(method='ordinal').cast(pl.Int64).suffix('_rank')\n]).sort('y2015_rank', reverse=True)\n\nsampled_data.head()\n\n\n\n\nshape: (5, 63)\n\n\n\n\ncountry\n\n\ncode\n\n\ny1960\n\n\ny1961\n\n\ny1962\n\n\ny1963\n\n\ny1964\n\n\ny1965\n\n\ny1966\n\n\ny1967\n\n\ny1968\n\n\ny1969\n\n\ny1970\n\n\ny1971\n\n\ny1972\n\n\ny1973\n\n\ny1974\n\n\ny1975\n\n\ny1976\n\n\ny1977\n\n\ny1978\n\n\ny1979\n\n\ny1980\n\n\ny1981\n\n\ny1982\n\n\ny1983\n\n\ny1984\n\n\ny1985\n\n\ny1986\n\n\ny1987\n\n\ny1988\n\n\ny1989\n\n\ny1990\n\n\ny1991\n\n\ny1992\n\n\ny1993\n\n\ny1994\n\n\ny1995\n\n\ny1996\n\n\ny1997\n\n\ny1998\n\n\ny1999\n\n\ny2000\n\n\ny2001\n\n\ny2002\n\n\ny2003\n\n\ny2004\n\n\ny2005\n\n\ny2006\n\n\ny2007\n\n\ny2008\n\n\ny2009\n\n\ny2010\n\n\ny2011\n\n\ny2012\n\n\ny2013\n\n\ny2014\n\n\ny2015\n\n\ny2016\n\n\nregion\n\n\nincome_group\n\n\ny1960_rank\n\n\ny2015_rank\n\n\n\n\nstr\n\n\nstr\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nf64\n\n\nstr\n\n\nstr\n\n\ncat\n\n\ni64\n\n\ni64\n\n\n\n\n\n\n\"Togo\"\n\n\n\"TGO\"\n\n\n162.4\n\n\n159.4\n\n\n156.4\n\n\n153.5\n\n\n150.5\n\n\n147.7\n\n\n144.7\n\n\n141.8\n\n\n138.8\n\n\n135.8\n\n\n132.8\n\n\n130.0\n\n\n127.2\n\n\n124.4\n\n\n121.8\n\n\n119.2\n\n\n116.6\n\n\n114.1\n\n\n111.7\n\n\n109.2\n\n\n106.9\n\n\n104.8\n\n\n102.7\n\n\n100.7\n\n\n98.9\n\n\n97.1\n\n\n95.5\n\n\n94.0\n\n\n92.6\n\n\n91.4\n\n\n90.2\n\n\n89.0\n\n\n87.9\n\n\n86.8\n\n\n85.5\n\n\n84.2\n\n\n82.8\n\n\n81.2\n\n\n79.6\n\n\n77.9\n\n\n76.2\n\n\n74.4\n\n\n72.6\n\n\n70.8\n\n\n69.1\n\n\n67.4\n\n\n65.7\n\n\n64.1\n\n\n62.5\n\n\n60.9\n\n\n59.3\n\n\n57.9\n\n\n56.5\n\n\n55.0\n\n\n53.6\n\n\n52.3\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n33\n\n\n35\n\n\n\n\n\"Haiti\"\n\n\n\"HTI\"\n\n\n194.8\n\n\n191.5\n\n\n188.3\n\n\n185.2\n\n\n182.2\n\n\n179.1\n\n\n176.0\n\n\n172.9\n\n\n169.8\n\n\n166.6\n\n\n163.4\n\n\n160.1\n\n\n156.6\n\n\n153.0\n\n\n149.5\n\n\n146.0\n\n\n142.6\n\n\n139.2\n\n\n135.8\n\n\n132.5\n\n\n129.4\n\n\n126.2\n\n\n123.0\n\n\n120.0\n\n\n117.1\n\n\n114.3\n\n\n111.5\n\n\n108.8\n\n\n106.1\n\n\n103.5\n\n\n101.0\n\n\n98.4\n\n\n95.8\n\n\n93.1\n\n\n90.4\n\n\n87.8\n\n\n85.1\n\n\n82.4\n\n\n79.9\n\n\n77.4\n\n\n75.0\n\n\n72.8\n\n\n70.7\n\n\n68.9\n\n\n67.2\n\n\n65.6\n\n\n64.1\n\n\n62.7\n\n\n61.3\n\n\n60.0\n\n\n85.5\n\n\n57.5\n\n\n56.2\n\n\n54.8\n\n\n53.5\n\n\n52.2\n\n\nnull\n\n\n\"Latin America ...\n\n\n\"Low income\"\n\n\n35\n\n\n34\n\n\n\n\n\"Gambia, The\"\n\n\n\"GMB\"\n\n\n148.4\n\n\n146.1\n\n\n143.8\n\n\n141.5\n\n\n139.3\n\n\n137.1\n\n\n134.9\n\n\n132.6\n\n\n130.5\n\n\n128.3\n\n\n126.0\n\n\n123.8\n\n\n121.5\n\n\n119.1\n\n\n116.7\n\n\n114.4\n\n\n112.1\n\n\n109.8\n\n\n107.6\n\n\n105.4\n\n\n103.2\n\n\n100.9\n\n\n98.6\n\n\n96.2\n\n\n93.7\n\n\n91.3\n\n\n88.9\n\n\n86.5\n\n\n84.3\n\n\n82.1\n\n\n80.0\n\n\n78.0\n\n\n76.1\n\n\n74.3\n\n\n72.6\n\n\n70.9\n\n\n69.3\n\n\n67.7\n\n\n66.2\n\n\n64.8\n\n\n63.3\n\n\n62.0\n\n\n60.6\n\n\n59.3\n\n\n58.0\n\n\n56.8\n\n\n55.6\n\n\n54.5\n\n\n53.6\n\n\n52.6\n\n\n51.7\n\n\n50.9\n\n\n50.1\n\n\n49.4\n\n\n48.6\n\n\n47.9\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n32\n\n\n33\n\n\n\n\n\"Zimbabwe\"\n\n\n\"ZWE\"\n\n\n92.6\n\n\n90.1\n\n\n87.6\n\n\n85.3\n\n\n82.8\n\n\n80.5\n\n\n78.3\n\n\n76.3\n\n\n74.7\n\n\n73.4\n\n\n72.4\n\n\n71.6\n\n\n71.1\n\n\n70.7\n\n\n70.5\n\n\n70.3\n\n\n70.1\n\n\n69.8\n\n\n69.2\n\n\n68.1\n\n\n66.4\n\n\n64.2\n\n\n61.6\n\n\n58.8\n\n\n56.0\n\n\n53.6\n\n\n51.7\n\n\n50.4\n\n\n49.8\n\n\n50.2\n\n\n51.2\n\n\n52.6\n\n\n54.5\n\n\n56.4\n\n\n58.1\n\n\n60.1\n\n\n61.6\n\n\n62.7\n\n\n63.3\n\n\n63.5\n\n\n63.5\n\n\n63.2\n\n\n62.7\n\n\n61.9\n\n\n61.5\n\n\n61.0\n\n\n60.3\n\n\n59.9\n\n\n58.9\n\n\n57.7\n\n\n55.8\n\n\n54.0\n\n\n49.4\n\n\n48.8\n\n\n47.6\n\n\n46.6\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Low income\"\n\n\n19\n\n\n32\n\n\n\n\n\"Zambia\"\n\n\n\"ZMB\"\n\n\n123.2\n\n\n120.9\n\n\n118.7\n\n\n116.7\n\n\n115.1\n\n\n114.0\n\n\n113.3\n\n\n112.9\n\n\n112.2\n\n\n111.1\n\n\n109.3\n\n\n106.7\n\n\n103.7\n\n\n100.7\n\n\n98.1\n\n\n96.3\n\n\n95.3\n\n\n95.1\n\n\n95.3\n\n\n95.6\n\n\n96.1\n\n\n97.0\n\n\n98.3\n\n\n100.2\n\n\n102.7\n\n\n105.6\n\n\n108.3\n\n\n110.6\n\n\n112.2\n\n\n113.1\n\n\n113.3\n\n\n113.0\n\n\n112.4\n\n\n111.3\n\n\n109.7\n\n\n107.8\n\n\n106.1\n\n\n104.6\n\n\n103.1\n\n\n100.9\n\n\n97.6\n\n\n92.7\n\n\n86.5\n\n\n80.0\n\n\n73.9\n\n\n68.7\n\n\n64.9\n\n\n61.3\n\n\n58.7\n\n\n55.6\n\n\n52.9\n\n\n51.1\n\n\n49.0\n\n\n46.5\n\n\n44.7\n\n\n43.3\n\n\nnull\n\n\n\"Sub-Saharan Af...\n\n\n\"Lower middle i...\n\n\n23\n\n\n31\n\n\n\n\n\n\n\nFirst graph\n\n(ggplot(sampled_data)\n + geom_text(aes(1, 'y1960_rank', label='country'), ha='right', size=9)\n + geom_text(aes(2, 'y2015_rank', label='country'), ha='left', size=9)\n + geom_point(aes(1, 'y1960_rank', color='income_group'), size=2.5)\n + geom_point(aes(2, 'y2015_rank', color='income_group'), size=2.5)\n + geom_segment(aes(x=1, y='y1960_rank', xend=2, yend='y2015_rank', color='income_group'))\n + scale_y_reverse()\n)\n\n\n\n\nChange in Rank\n\n\n\n\nIt has the form we want, but we need to tweak it.\n\n# Text colors\nblack1 = '#252525'\nblack2 = '#222222'\n\n# Gallery Plot\n\n(ggplot(sampled_data)\n # Slight modifications for the original lines,\n # 1. Nudge the text to either sides of the points\n # 2. Alter the color and alpha values\n + geom_text(aes(1, 'y1960_rank', label='country'), nudge_x=-0.05, ha='right', size=9, color=black1)\n + geom_text(aes(2, 'y2015_rank', label='country'), nudge_x=0.05, ha='left', size=9, color=black1)\n + geom_point(aes(1, 'y1960_rank', color='income_group'), size=2.5, alpha=.7)\n + geom_point(aes(2, 'y2015_rank', color='income_group'), size=2.5, alpha=.7)\n + geom_segment(aes(x=1, y='y1960_rank', xend=2, yend='y2015_rank', color='income_group'), alpha=.7)\n \n # Text Annotations\n #+ annotate('text', x=1, y=0, label='Rank in 1960', fontweight='bold', ha='right', size=10, color=black2)\n #+ annotate('text', x=2, y=0, label='Rank in 2015', fontweight='bold', ha='left', size=10, color=black2)\n + annotate('text', x=1.5, y=0, label='Lines show change in rank', size=9, color=black1)\n #+ annotate('label', x=1.5, y=3, label='Lower infant\\ndeath rates', size=9, color=black1,\n #           label_size=0, fontstyle='italic')\n #+ annotate('label', x=1.5, y=33, label='Higher infant\\ndeath rates', size=9, color=black1,\n #           label_size=0, fontstyle='italic')\n \n # Prevent country names from being chopped off\n + lims(x=(0.35, 2.65))\n + labs(color='Income Group')\n # Countries with lower rates on top\n + scale_y_reverse()\n # Change colors\n + scale_color_brewer(type='qual', palette=2)\n # Removes all decorations\n + theme_void()\n # Changing the figure size prevents the country names from squishing up\n + theme(figure_size=(8, 11))\n)"
  },
  {
    "objectID": "test_nbs/plotnineanimation.html",
    "href": "test_nbs/plotnineanimation.html",
    "title": "Spiral Animation",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nfrom plotnine import (\n    ggplot,\n    aes,\n    geom_path,\n    theme,\n    theme_void,\n    lims\n)\nfrom plotnine.animation import PlotnineAnimation\n\n# for animation in the notebook\nfrom matplotlib import rc\nrc('animation', html='html5')\n\nHow to create Animations\nThe PlotnineAnimation methods takes a sequence of plots and animates them. The best way to create the sequence is to use a function that generates plots.\nNOTE: When creating the plots make sure all the plots have scales with the same limits for each aesthetic, including the x and y aesthetics.\n\n# Parameters used to control the spiral\nn = 100\ntightness = 1.3\nkmin = 1\nkmax = 25\nnum_frames = 25\ntheta = np.linspace(-np.pi, np.pi, n)\n\ndef plot(k):\n    # For every plot we change the theta\n    _theta = theta*k\n    \n    # Polar Equation of each spiral\n    r = tightness*_theta\n    \n    df = pd.DataFrame({\n        'theta': _theta,\n        'r': r,\n        'x': r*np.sin(_theta),\n        'y': r*np.cos(_theta)\n    })\n\n    p = (ggplot(df)\n         + geom_path(aes('x', 'y', color='theta'), size=1)\n         + lims(\n             # All the plots have scales with the same limits\n             x=(-130, 130),\n             y=(-130, 130),\n             color=(-kmax*np.pi, kmax*np.pi)\n         )\n         + theme_void()\n         + theme(\n             aspect_ratio=1,\n             # Make room on the right for the legend\n             subplots_adjust={'right': 0.85}\n         )\n    )\n    return p\n\n# It is better to use a generator instead of a list\nplots = (plot(k) for k in np.linspace(kmin, kmax, num_frames))\nani = PlotnineAnimation(plots, interval=100, repeat_delay=500)\n# ani.save('/tmp/animation.mp4')\nani\n\n\n  \n  Your browser does not support the video tag.\n\n\n\nThe final image of the spiral\n\nplot(kmax)\n\n\n\n\nSpiral Animation\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  }
]